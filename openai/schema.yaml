openapi: 3.1.0
info:
  title: Tasker API
  version: 1.0.0
  description: API for managing todo files and executing actions

servers:
  - url: https://mediabit.go.ro

paths:
  /api/todos:
    get:
      operationId: listTodoFiles
      summary: List Todo Files
      description: Lists all .todo files in the configured base directory
      responses:
        "200":
          description: A list of .todo files
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      type: string

  /api/tasks/load:
    get:
      operationId: loadTodoFile
      summary: Load Todo File
      parameters:
        - name: filepath
          in: query
          required: true
          description: Path to the todo file to load
          schema:
            type: string
      responses:
        "200":
          description: Parsed todo file content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoFileContent'
        "404":
          description: Todo file not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/tasks/update:
    patch:
      operationId: updateTask
      summary: Update Task
      parameters:
        - name: filepath
          in: query
          required: true
          description: Path to the todo file containing the task
          schema:
            type: string
        - name: taskId
          in: query
          required: true
          description: ID of the task to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: New text for the task
                status:
                  type: string
                  enum: [completed, uncompleted, underway, paused]
                addTag:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                removeTag:
                  type: string
      responses:
        "200":
          description: Updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /api/tasks/project:
    post:
      operationId: createProject
      summary: Create New Project
      parameters:
        - name: filepath
          in: query
          required: true
          description: Path to the todo file where the project will be created
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Name of the new project
      responses:
        "200":
          description: Created project
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: '#/components/schemas/Project'
                  projectId:
                    type: string
                    description: ID of the created project (1-based index)

  /api/tasks/create:
    post:
      operationId: createTasks
      summary: Create Multiple Tasks
      parameters:
        - name: filepath
          in: query
          required: true
          description: Path to the todo file where the tasks will be created
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tasks
              properties:
                tasks:
                  type: array
                  items:
                    type: object
                    required:
                      - projectId
                      - text
                    properties:
                      projectId:
                        type: string
                        description: ID of the project where to create the task (e.g., "1" for first project)
                      parentTaskId:
                        type: string
                        description: Optional ID of parent task for creating subtasks (e.g., "1.1" for first task in first project)
                      text:
                        type: string
                        description: Text content of the task
      responses:
        "200":
          description: Created tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    task:
                      $ref: '#/components/schemas/Task'
                    taskId:
                      type: string
                      description: ID of the created task (e.g., "1.1" or "1.1.1")

  /api/tasks/delete:
    delete:
      operationId: deleteItems
      summary: Delete Projects, Tasks, or Subtasks
      parameters:
        - name: filepath
          in: query
          required: true
          description: Path to the todo file containing items to delete
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - itemIds
              properties:
                itemIds:
                  type: array
                  items:
                    type: string
                  description: Array of item IDs to delete (e.g., ["1"] for first project, ["1.1"] for first task in first project)
      responses:
        "200":
          description: Deleted items
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [project, task, subtask]
                      description: Type of item deleted
                    id:
                      type: string
                      description: ID of the deleted item
                    item:
                      oneOf:
                        - $ref: '#/components/schemas/Project'
                        - $ref: '#/components/schemas/Task'

  /api/actions:
    get:
      operationId: listActions
      summary: List Available Actions
      responses:
        "200":
          description: List of available actions
          content:
            application/json:
              schema:
                type: object
                properties:
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Action'

  /api/actions/execute:
    post:
      operationId: executeAction
      summary: Execute Action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [cmd, browser, get_email, send_email, trash_email, photoshop, filesystem]
                parameters:
                  type: string
                  description: Action-specific parameters format
              required:
                - action
                - parameters
            examples:
              browser:
                value:
                  action: browser
                  parameters: '"https://example.com", 800, 600, 0, 0'
                summary: Parameters format - URL, width, height, x, y
              cmd:
                value:
                  action: cmd
                  parameters: 'echo hello world'
                summary: Parameters format - command string
              get_email:
                value:
                  action: get_email
                  parameters: '"alex@mediabit.ro", "INBOX", 1'
                summary: Parameters format - account_name, folder, number_of_emails
              photoshop_create:
                value:
                  action: photoshop
                  parameters: '{"command": "create", "width": 800, "height": 600, "name": "test"}'
                summary: Required first command for any Photoshop process - width, height, name
              photoshop_add_text:
                value:
                  action: photoshop
                  parameters: '{"command": "addText", "text": "Hello World", "x": 400, "y": 300, "size": 48, "color": [0,0,0]}'
                summary: Optional command - text, position (x,y), size, color
              photoshop_add_image:
                value:
                  action: photoshop
                  parameters: '{"command": "addImage", "imagePath": "c:/hub/test/image.jpg", "x": 0, "y": 0, "width": 400, "height": 300}'
                summary: Optional command - imagePath, position (x,y), dimensions
              photoshop_save:
                value:
                  action: photoshop
                  parameters: '{"command": "save", "path": "c:/hub/core/tasker/output/test.psd", "format": "psd"}'
                summary: Required final command for any Photoshop process - path, format
              filesystem_create_folder:
                value:
                  action: filesystem
                  parameters: '{"command": "create", "structure": [{"type": "folder", "path": "projects/new-project"}]}'
                summary: Create a single folder
              filesystem_create_file:
                value:
                  action: filesystem
                  parameters: '{"command": "create", "structure": [{"type": "file", "path": "projects/readme.md", "content": "# Project Documentation\nThis is a sample readme file."}]}'
                summary: Create a single file with content
              filesystem_create_multiple:
                value:
                  action: filesystem
                  parameters: '{"command": "create", "structure": [{"type": "folder", "path": "projects/website"}, {"type": "folder", "path": "projects/website/src"}, {"type": "folder", "path": "projects/website/assets"}, {"type": "file", "path": "projects/website/index.html", "content": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My Website</title>\n</head>\n<body>\n    <h1>Welcome</h1>\n</body>\n</html>"}, {"type": "file", "path": "projects/website/src/styles.css", "content": "body { margin: 0; padding: 20px; }"}]}'
                summary: Create multiple files and folders in a single operation
              filesystem_scan_basic:
                value:
                  action: filesystem
                  parameters: '{"command": "scan", "path": "projects", "options": {"recursive": false}}'
                summary: Non-recursive directory scan
              filesystem_scan_recursive:
                value:
                  action: filesystem
                  parameters: '{"command": "scan", "path": "projects", "options": {"recursive": true, "includeContent": true, "maxSize": 51200}}'
                summary: Recursive scan with file contents (max 50KB per file)
      responses:
        "200":
          description: Action execution result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object

  /api/oracles:
    get:
      operationId: listOracles
      summary: List Oracles
      responses:
        "200":
          description: List of oracles
          content:
            application/json:
              schema:
                type: object
                properties:
                  oracles:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string

  /api/oracles/query:
    post:
      operationId: queryOracle
      summary: Query Oracle Data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                path:
                  type: string
                parameters:
                  type: object
                  additionalProperties: true
      responses:
        "200":
          description: Oracle query result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    additionalProperties: true

  /api/oracles/execute:
    post:
      operationId: executeOracle
      summary: Execute Oracle Action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                script:
                  type: string
                parameters:
                  type: object
                  additionalProperties: true
      responses:
        "200":
          description: Script execution result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    additionalProperties: true

components:
  schemas:
    TodoFileContent:
      type: object
      properties:
        filename:
          type: string
        content:
          type: object
          properties:
            projects:
              type: array
              items:
                $ref: '#/components/schemas/Project'

    Project:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'

    Task:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        done:
          type: boolean
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    Tag:
      type: object
      properties:
        name:
          type: string
        value:
          type: string

    Action:
      type: object
      properties:
        type:
          type: string
          enum: [cmd, browser, get_email, send_email, trash_email, photoshop, filesystem]
        parameters:
          type: string
